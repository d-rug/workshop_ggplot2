[["index.html", "Data Visualization in R using ggplot2 Overview 0.1 ggplot2", " Data Visualization in R using ggplot2 Wesley Brooks 2023-02-15 Overview The Davis R Users’ Group meets weekly on Thursdays 10-12 in the Datalab classroom. For those who can’t join in person, we always include a Zoom link for the meetings. We also maintain a question-and-answer forum at d-rug.discourse.group. The group home page is d-rug.github.io. That’s where the calendar of upcoming meetings, link to sign up, and blog posts describing past meetings can be found. You can join the email list for reminders about the weekly meetings and news about R-related events around Davis at this link (it’s also on the group home page): https://groups.google.com/d/forum/davis-rug. 0.1 ggplot2 Today I am going to provide some instruction about generating data visualization in R with the ggplot2 package. We will cover: The grammar of graphics and how it powers ggplot2. The layers that make up a ggplot2 data visualization. Guidelines for good data viz. Examples of working with ggplot2. "],["introduction.html", "1 Introduction", " 1 Introduction ggplot2 is an enormously popular R package that provides a way to create data visualizations through a so-called “grammar of graphics” (hence the “gg” in the name). That grammar interface may be a little bit unintuitive at first but once you grasp it, you hold enormous power to quickly craft plots. It doesn’t hurt that the ggplot2 plots look great, too. Today I’ll be teaching you the basics of ggplot2 with a special emphasis on the grammar of graphics. "],["the-grammar-of-graphics.html", "2 The grammar of graphics 2.1 Example: distance to stop a car 2.2 Layers", " 2 The grammar of graphics The grammar of graphics breaks the elements of statistical graphics into parts in an analogy to human language grammars. Knowing how to put together subject nouns, object nouns, verbs, and adjectives allows you to construct sentences that express meaning. Similarly, the grammar of graphics is a collection of layers and the rules for putting them together to graphically express the meaning of your data. ggplot2 is a software tool that understands ideas expressed in the grammar of graphics and can draw the requested picture. Ideas in the grammar of graphics are expressed in layers. The most basic layer is the data itself, and there is an aesthetic layer that describes how data maps onto dimensions like color, x/y coordinates, and size. This layer is distinct from the geometry layer, which describes the way that data should be drawn (e.g., dots, lines, or bars). There are other kinds of layers, but many plots can be specified as the combination of data, aesthetic mapping, and geometry. Let’s see one. 2.1 Example: distance to stop a car One of the datasets built into R is an experiment from the 1920s that measured how far (in feet) cars needed to stop from speeds of 4-25 miles per hour. # load the data and attack the ggplot2 package data(cars) library( ggplot2 ) # look at the data - it is tidy head( cars ) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 7 22 ## 5 8 16 ## 6 9 10 # make a simple plot of the data ggplot(cars) + aes(x=speed, y=dist) + geom_point() 2.2 Layers Layers are the building blocks of the grammar of graphics. There aren’t even that many of them! Here is the list, and the name of the function(s) you’ll use to control the layer. Some of the names include asterisks because there are a lot of similar options - for instance, geometry layers include geom_point(), geom_line(), geom_boxplot(), and many more. See the comprehensive listing on the official ggplot2 website. Data (ggplot2()) - provides the data for the visualization. Aesthetics (aes()) - a mapping that indicates which variables in the data control which dimension in the plot (here “dimension” is used in an abstract way to include things like shape, color, and line width.) Geometry (geom_*()) - how the abstract dimensions of the aesthetic layer will be drawn in the figure. Statistical transform (stat_*()) - alters the data before it enters the aesthetics layer - for instance binning or removing duplicates. Scale (scale_*()) - used to control the way that values in the data are mapped to the aesthetic dimensions. For instance, you can control how numbers or categories in the data map to colors. Coordinates (coord_*()) - used to control how the data are mapped to plot axes. Facets (facet_*()) - used to control how data are separated into subplots called “facets”. Theme (theme()) - used to control plot details like titles, labels, and legends. "],["guidelines-for-graphics.html", "3 Guidelines for graphics 3.1 Data 3.2 Feature types 3.3 Theme guidelines 3.4 Scale guidelines 3.5 Facet guidelines 3.6 Example, revisited", " 3 Guidelines for graphics I’ve attached a PDF checklist for creating good data visualizations, reated by Nick Ulle of UC Davis Datalab. Download it and keep a copy around - it’s an excellent guide. I’m going to go over how the checklist translates into the grammar of graphics. 3.1 Data You can’t have a data visualization without data! ggplot2 expects that your data is tidy, which means that each row is a complete observation and each column is a unique feature. In fact, ggplot2 is part of an actively developing collection of packages called the tidyverse that provides ways to create and work with tidy data. You dont have to adopt the entire tidyverse to use ggplot2, though. 3.2 Feature types The first item on the list is a table of options for geometries that are commonly relevant for a given kind of data - for instance, a histogram is a geometry that can be used with a single numeric feature, and a box plot can be used with one numeric and one categorical feature. - Should it be a dot plot? Pie plots are hard to read and bar plots don’t use space efficiently (Cleveland and McGill 1990; Heer and Bostock 2010). Generally a dot plot is a better choice. 3.3 Theme guidelines Does the graphic convey important information? Don’t include graphics that are uninformative or redundant. Title? Make sure the title explains what the graphic shows. Axis labels? Label the axes in plain language (no variable names!). Axis units? Label the axes with units (inches, dollars, etc). Legend? Any graphic that shows two or more categories coded by style or color must include a legend. 3.4 Scale guidelines Appropriate scales and limits? Make sure the scales and limits of the axes do not lead people to incorrect conclusions. For side-by-side graphics or graphics that viewers will compare, use identical scales and limits. Print safe? Design graphics to be legible in black &amp; white. Color is great, but use point and line styles to distinguish groups in addition to color. Also try to choose colors that are accessible to colorblind people. The RColorBrewer and viridis packages can help with choosing colors. 3.5 Facet guidelines No more than 5 lines? Line plots with more than 5 lines risk becoming hard-to-read “spaghetti” plots. Generally a line plot with more than 5 lines should be split into multiple plots with fewer lines. If the x-axis is discrete, consider using a heat map instead. No overplotting? Scatter plots where many plot points overlap hide the actual patterns in the data. Consider splitting the data into facets, making the points smaller, or using a two-dimensional density plot (a smooth scatter plot) instead. 3.6 Example, revisited Our earlier example violates some of these rules: it has no title, the axes are labeled with variable names instead of plain language, and the plot units aren’t provided. # create the plot with labels and title ggplot(cars) + aes(x=speed, y=dist) + geom_point() + xlab(&quot;speed (mph)&quot;) + ylab(&quot;stopping distance (feet)&quot;) + ggtitle(&quot;Stopping distance&quot;) "],["examples.html", "4 Examples 4.1 Bird Flu mortality 4.2 Small business loans", " 4 Examples We have covered enough of the grammar of graphics that you should begin to see the patterns in how it is used to express graphical ideas for ggplot2. Here, we will work through some examples. 4.1 Bird Flu mortality People mail dead birds to the USDA and USGS, where scientists analyze the birds to find out why they died. Right now there is a bird flu epidemic, and the USDA provides public data about the birds in whom the disease has been detected. You can access the data here: https://www.aphis.usda.gov/aphis/ourfocus/animalhealth/animal-disease-information/avian/avian-influenza/hpai-2022/2022-hpai-wild-birds. We will load the data and do some visualization. # load data directly from the USDA website flu = read_csv( url(&quot;https://www.aphis.usda.gov/animal_health/data-csv/hpai-wild-birds-ver2.csv&quot;)) ## Rows: 6192 Columns: 8 ## ── Column specification ─────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (8): State, County, Date Detected, HPAI Strain, Bird Species, WOAH Class... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. flu$date = mdy(flu$`Date Detected`) # plot a histogram of when bird flu was detected ggplot(flu) + aes(x=date) + geom_histogram() + ggtitle( &quot;Bird flu detections in wild birds&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Count&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # plot a histogram of when bird flu was detected ggplot(flu) + aes(x=date, fill=`Sampling Method`) + geom_histogram() + ggtitle( &quot;Bird flu detections in wild birds&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Count&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # bar chart shows how the bird flu reports compare between west coast states subset(flu, State %in% c(&quot;California&quot;, &quot;Oregon&quot;, &quot;Washington&quot;)) |&gt; ggplot() + aes(x=State, fill=`Sampling Method`) + stat_count() + geom_bar() + ggtitle( &quot;Bird flu detections in wild birds (West coast states)&quot;) + ylab(&quot;Count&quot;) Let’s compare the bird flu season to the human flu season. Download hospitalization data for the 2021-2022 and 2022-2023 flu seasons from the CDC website here: https://gis.cdc.gov/GRASP/Fluview/FluHospRates.html (the download button is at the top right and you need to specify which seasons to download). # processing CDC flu data: cdc = read_csv(&quot;data/FluSurveillance_Custom_Download_Data.csv&quot;, skip=2) ## Warning: One or more parsing issues, call `problems()` on your data frame for details, e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 1538 Columns: 10 ## ── Column specification ─────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (8): CATCHMENT, NETWORK, YEAR, AGE CATEGORY, SEX CATEGORY, RACE CATEGORY... ## dbl (2): MMWR-YEAR, MMWR-WEEK ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. cdc$date = as_date(&quot;1950-01-01&quot;) year(cdc$date) = cdc$`MMWR-YEAR` week(cdc$date) = cdc$`MMWR-WEEK` # get flu hospitalization counts that include all race, sex, and age categories cdc_overall = subset(cdc, `AGE CATEGORY`==&quot;Overall&quot; &amp; `SEX CATEGORY`==&quot;Overall&quot; &amp; `RACE CATEGORY`==&quot;Overall&quot;) # convert the counts to cases per 10 million cdc_overall$`WEEKLY RATE` = as.numeric(cdc_overall$`WEEKLY RATE`) * 100 ## Warning: NAs introduced by coercion # remake the plot but add a new geom_line() with its own data ggplot(flu) + aes(x=date, fill=`Sampling Method`) + geom_histogram() + geom_line(data=cdc_overall, mapping=aes(x=date, y=`WEEKLY RATE`), inherit.aes=FALSE) + ggtitle(&quot;Bird flu detections and human flu hospitalizations&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Count&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 12 rows containing missing values (`geom_line()`). 4.2 Small business loans The US Small Business Administration (SBA) maintains data on the loans it offers to businesses. Data about loans made since 2020 can be found at https://data.sba.gov/dataset/7-a-504-foia. We’ll load that data and then explore some ways to visualize it. # load the small business loan data sba = read_csv( url(&quot;https://data.sba.gov/dataset/0ff8e8e9-b967-4f4e-987c-6ac78c575087/resource/c71ba6cf-b4e0-4e60-98f0-48aeaf4c6460/download/foia-7afy2020-present-asof-221231.csv&quot;)) ## Rows: 154807 Columns: 39 ## ── Column specification ─────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (27): Program, BorrName, BorrStreet, BorrCity, BorrState, BorrZip, BankN... ## dbl (12): AsOfDate, BankFDICNumber, BankNCUANumber, GrossApproval, SBAGuaran... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # check the SBA data to see the data types, etc. head(sba) ## # A tibble: 6 × 39 ## AsOfDate Program BorrName BorrS…¹ BorrC…² BorrS…³ BorrZip BankN…⁴ BankF…⁵ ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 20221231 7A Mark Dusa 3623 S… Sylvan… OH 43560 The Hu… 6560 ## 2 20221231 7A Shaddai Harr… 614 Va… Arling… TX 76018 People… NA ## 3 20221231 7A Aqualon Inc. 7180 A… Tipp C… OH 45371 The Hu… 6560 ## 4 20221231 7A Redline Rest… 2450 C… Saint … FL 34772 SouthS… 33555 ## 5 20221231 7A Meluota Corp 2702 A… ASTORIA NY 11102 Santan… 29950 ## 6 20221231 7A Sky Lake Vac… 15 Nes… Laconia NH 03246 TD Ban… 18409 ## # … with 30 more variables: BankNCUANumber &lt;dbl&gt;, BankStreet &lt;chr&gt;, ## # BankCity &lt;chr&gt;, BankState &lt;chr&gt;, BankZip &lt;chr&gt;, GrossApproval &lt;dbl&gt;, ## # SBAGuaranteedApproval &lt;dbl&gt;, ApprovalDate &lt;chr&gt;, ApprovalFiscalYear &lt;dbl&gt;, ## # FirstDisbursementDate &lt;chr&gt;, DeliveryMethod &lt;chr&gt;, subpgmdesc &lt;chr&gt;, ## # InitialInterestRate &lt;dbl&gt;, TermInMonths &lt;dbl&gt;, NaicsCode &lt;dbl&gt;, ## # NaicsDescription &lt;chr&gt;, FranchiseCode &lt;chr&gt;, FranchiseName &lt;chr&gt;, ## # ProjectCounty &lt;chr&gt;, ProjectState &lt;chr&gt;, SBADistrictOffice &lt;chr&gt;, … # boxplot of loan sizes by business type subset( sba, ProjectState==&quot;CA&quot; ) |&gt; ggplot() + aes(x=BusinessType, y=SBAGuaranteedApproval) + geom_boxplot() + scale_y_log10() + ggtitle(&quot;Small Business Administraton guaranteed loans in California&quot;) + ylab(&quot;Loan guarantee (dollars)&quot;) # relationship between loan size and interest rate subset( sba, ProjectState==&quot;CA&quot; ) |&gt; ggplot() + aes(x=GrossApproval, y=InitialInterestRate, ) + geom_point() + facet_wrap(~BusinessType, ncol=3) + scale_x_log10() + ggtitle(&quot;Interest rate as a function of loan size&quot;) + xlab(&quot;Loan size (dollars)&quot;) + ylab(&quot;Interest rate (%)&quot;) Now let’s see how we can add aesthetic mappings to a plot in order to convey information on a new dimension. In this case, we will color the points by the loan status. If the default colors aren’t working for you, ggplot2 can integrate directly with Color Brewer (colorbrewer2.org). A smoother can help indicate differences that would otherwise be lost in the noise. # color the dots by the oan status. subset( sba, ProjectState==&quot;CA&quot; &amp; LoanStatus != &quot;EXEMPT&quot; &amp; LoanStatus != &quot;CHGOFF&quot; ) |&gt; ggplot() + aes(x=GrossApproval, y=InitialInterestRate, color=LoanStatus) + geom_point() + geom_smooth() + facet_wrap(~BusinessType, ncol=3) + scale_x_log10() + ggtitle(&quot;Interest rate as a function of loan size by loan status&quot;) + xlab(&quot;Loan size (dollars)&quot;) + ylab(&quot;Interest rate (%)&quot;) + labs( color=&quot;Loan status&quot;) + scale_color_brewer(type=&quot;qual&quot;, palette=&quot;Accent&quot;) ## `geom_smooth()` using method = &#39;gam&#39; and formula = &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
